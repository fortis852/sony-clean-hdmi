name: Build Clean HDMI App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      run: |
        echo "ðŸ“± Setting up Android SDK..."
        mkdir -p android-sdk
        cd android-sdk
        
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        rm commandlinetools-linux-9477386_latest.zip
        
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        export ANDROID_HOME=$PWD
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        
        yes | sdkmanager --licenses 2>/dev/null || true
        sdkmanager "platform-tools" "platforms;android-19" "build-tools;30.0.3"
        
        cd ..
        
        echo "ANDROID_HOME=$PWD/android-sdk" >> $GITHUB_ENV
        echo "$PWD/android-sdk/platform-tools" >> $GITHUB_PATH
        echo "$PWD/android-sdk/build-tools/30.0.3" >> $GITHUB_PATH
    
    - name: Fix Lambda Expressions
      run: |
        echo "ðŸ”§ Checking and fixing lambda expressions..."
        
        # Check if lambdas exist
        if grep -r "() *-> *{" src/main/java/; then
          echo "Found lambda expressions, fixing..."
          
          # Fix MainActivity.java specifically
          cat > src/main/java/com/cleanhdmi/MainActivity_fixed.java << 'EOF'
        package com.cleanhdmi;
        
        import android.app.Activity;
        import android.os.Bundle;
        import android.view.View;
        import android.view.Window;
        import android.view.WindowManager;
        import android.widget.FrameLayout;
        import android.util.Log;
        
        public class MainActivity extends Activity {
            private static final String TAG = "CleanHDMI";
            
            private LiveViewManager liveViewManager;
            private CameraController cameraController;
            private UIController uiController;
            private boolean isUIVisible = false;
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                Log.d(TAG, "Starting Clean HDMI application");
                setupFullscreen();
                initializeComponents();
                startCleanView();
            }
            
            private void setupFullscreen() {
                requestWindowFeature(Window.FEATURE_NO_TITLE);
                getWindow().setFlags(
                    WindowManager.LayoutParams.FLAG_FULLSCREEN,
                    WindowManager.LayoutParams.FLAG_FULLSCREEN
                );
                View decorView = getWindow().getDecorView();
                int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                              | View.SYSTEM_UI_FLAG_FULLSCREEN
                              | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
                decorView.setSystemUiVisibility(uiOptions);
            }
            
            private void initializeComponents() {
                FrameLayout layout = new FrameLayout(this);
                layout.setBackgroundColor(0xFF000000);
                setContentView(layout);
                liveViewManager = new LiveViewManager(this, layout);
                cameraController = new CameraController(this);
                uiController = new UIController(this, layout);
                setupControls();
            }
            
            private void startCleanView() {
                try {
                    liveViewManager.startCleanMode();
                    cameraController.applyDefaultSettings();
                    Log.d(TAG, "Clean view started successfully");
                } catch (Exception e) {
                    Log.e(TAG, "Failed to start clean view: " + e.getMessage());
                }
            }
            
            private void setupControls() {
                uiController.setOnMenuPressListener(new Runnable() {
                    @Override
                    public void run() {
                        toggleUI();
                    }
                });
                
                uiController.setOnFnPressListener(new Runnable() {
                    @Override
                    public void run() {
                        cameraController.toggleFocusLock();
                    }
                });
            }
            
            private void toggleUI() {
                if (isUIVisible) {
                    uiController.hideUI();
                } else {
                    uiController.showUI();
                }
                isUIVisible = !isUIVisible;
            }
            
            @Override
            protected void onResume() {
                super.onResume();
                liveViewManager.resume();
            }
            
            @Override
            protected void onPause() {
                super.onPause();
                liveViewManager.pause();
            }
            
            @Override
            protected void onDestroy() {
                super.onDestroy();
                liveViewManager.stop();
                cameraController.release();
            }
        }
        EOF
          
          mv src/main/java/com/cleanhdmi/MainActivity_fixed.java src/main/java/com/cleanhdmi/MainActivity.java
          echo "âœ… Lambda expressions fixed"
        else
          echo "âœ… No lambda expressions found"
        fi
        
        # Show the fixed file for verification
        echo "Current MainActivity.java content (first 100 lines):"
        head -n 100 src/main/java/com/cleanhdmi/MainActivity.java
    
    - name: Build APK
      run: |
        chmod +x scripts/build_apk.sh
        ./scripts/build_apk.sh
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: CleanHDMI-${{ github.run_number }}
        path: |
          build/apk/*.apk
          build/apk/*.jar
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build/**/*.txt
          build/**/*.log
        retention-days: 7
        if-no-files-found: ignore
