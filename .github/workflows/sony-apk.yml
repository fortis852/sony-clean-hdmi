name: Build Sony APK Simple

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/sony-apk-simple.yml'

jobs:
  build-sony-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Download working Sony app
      run: |
        echo "üì• Downloading working Sony app..."
        mkdir -p work
        cd work
        
        # Download PMCADemo - it definitely works on HX400
        wget https://github.com/ma1co/PMCADemo/releases/download/release-14/com.github.ma1co.PMCADemo-release-14.apk -O base.apk || {
          echo "Failed to download PMCADemo, trying alternative..."
          wget https://github.com/ma1co/OpenMemories-Tweak/releases/download/release-41/com.github.ma1co.OpenMemories-Tweak-release-41.apk -O base.apk
        }
        
        if [ ! -f "base.apk" ]; then
          echo "‚ùå Could not download base APK"
          exit 1
        fi
        
        echo "‚úÖ Downloaded base.apk"
        ls -lh base.apk
    
    - name: Download and setup apktool
      run: |
        echo "üì¶ Setting up apktool..."
        cd work
        
        # Download apktool
        wget https://github.com/iBotPeaches/Apktool/releases/download/v2.9.0/apktool_2.9.0.jar -O apktool.jar
        
        # Download framework files that apktool might need
        mkdir -p ~/.local/share/apktool/framework
        
        echo "‚úÖ Apktool ready"
    
    - name: Decompile APK
      run: |
        echo "üîß Decompiling base APK..."
        cd work
        
        java -jar apktool.jar d -f base.apk -o decompiled
        
        echo "üìÅ Decompiled structure:"
        ls -la decompiled/
        
        # Show what we're working with
        echo "üìÑ Original AndroidManifest.xml (first 20 lines):"
        head -20 decompiled/AndroidManifest.xml || true
    
    - name: Modify APK
      run: |
        echo "‚úèÔ∏è Modifying APK for Clean HDMI..."
        cd work/decompiled
        
        # Change app name in all language files
        for file in res/values*/strings.xml; do
          if [ -f "$file" ]; then
            echo "Modifying $file"
            # Change app name
            sed -i 's/<string name="app_name">.*<\/string>/<string name="app_name">Clean HDMI<\/string>/g' "$file" || true
            # Change any other visible strings
            sed -i 's/>PMCADemo</>Clean HDMI</g' "$file" || true
            sed -i 's/>OpenMemories[^<]*</>Clean HDMI</g' "$file" || true
          fi
        done
        
        # Show changes
        echo "üìÑ Modified strings.xml:"
        grep "app_name" res/values/strings.xml || true
        
        # Create our own simple activity (in smali - Dalvik assembly)
        mkdir -p smali/com/cleanhdmi
        cat > smali/com/cleanhdmi/SimpleActivity.smali << 'EOF'
        .class public Lcom/cleanhdmi/SimpleActivity;
        .super Landroid/app/Activity;
        .source "SimpleActivity.java"
        
        # direct methods
        .method public constructor <init>()V
            .locals 0
            
            .prologue
            .line 5
            invoke-direct {p0}, Landroid/app/Activity;-><init>()V
            
            return-void
        .end method
        
        # virtual methods
        .method protected onCreate(Landroid/os/Bundle;)V
            .locals 2
            .param p1, "savedInstanceState"    # Landroid/os/Bundle;
            
            .prologue
            .line 8
            invoke-super {p0, p1}, Landroid/app/Activity;->onCreate(Landroid/os/Bundle;)V
            
            .line 10
            new-instance v0, Landroid/widget/TextView;
            invoke-direct {v0, p0}, Landroid/widget/TextView;-><init>(Landroid/content/Context;)V
            
            .line 11
            .local v0, "tv":Landroid/widget/TextView;
            const-string v1, "Clean HDMI Mode"
            invoke-virtual {v0, v1}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V
            
            .line 12
            const/high16 v1, 0x41f00000    # 30.0f
            invoke-virtual {v0, v1}, Landroid/widget/TextView;->setTextSize(F)V
            
            .line 13
            invoke-virtual {p0, v0}, Lcom/cleanhdmi/SimpleActivity;->setContentView(Landroid/view/View;)V
            
            .line 14
            return-void
        .end method
        EOF
        
        echo "‚úÖ Modifications complete"
    
    - name: Rebuild APK
      run: |
        echo "üî® Rebuilding APK..."
        cd work
        
        # Build with apktool
        java -jar apktool.jar b decompiled -o CleanHDMI_unsigned.apk
        
        if [ ! -f "CleanHDMI_unsigned.apk" ]; then
          echo "‚ùå Build failed"
          # Try to show error
          java -jar apktool.jar b decompiled -o CleanHDMI_unsigned.apk --verbose || true
          exit 1
        fi
        
        echo "‚úÖ APK rebuilt successfully"
        ls -lh CleanHDMI_unsigned.apk
    
    - name: Sign APK
      run: |
        echo "üîê Signing APK..."
        cd work
        
        # Create keystore
        keytool -genkeypair \
          -keyalg RSA \
          -keysize 2048 \
          -validity 10000 \
          -alias sony \
          -keystore sony.keystore \
          -storepass android \
          -keypass android \
          -dname "CN=Sony,O=CleanHDMI,C=US" \
          -noprompt
        
        # Sign APK
        jarsigner \
          -sigalg SHA1withRSA \
          -digestalg SHA1 \
          -keystore sony.keystore \
          -storepass android \
          -signedjar CleanHDMI.apk \
          CleanHDMI_unsigned.apk \
          sony
        
        # Verify signature
        echo "üìù Verifying signature..."
        jarsigner -verify -verbose -certs CleanHDMI.apk || true
        
        echo "‚úÖ APK signed"
        ls -lh CleanHDMI.apk
    
    - name: Create additional variants
      run: |
        echo "üîÑ Creating additional variants..."
        cd work
        
        # Variant 1: Keep original package name but change UI
        cp -r decompiled decompiled_variant1
        cd decompiled_variant1
        
        # Only change visible strings, keep package structure
        find res -name "*.xml" -exec sed -i 's/>.*Demo</>Clean HDMI</g' {} \; 2>/dev/null || true
        find res -name "*.xml" -exec sed -i 's/>.*Tweak</>Clean HDMI</g' {} \; 2>/dev/null || true
        
        cd ..
        java -jar apktool.jar b decompiled_variant1 -o CleanHDMI_variant1.apk || true
        
        # Sign variant if it exists
        if [ -f "CleanHDMI_variant1.apk" ]; then
          jarsigner \
            -sigalg SHA1withRSA \
            -digestalg SHA1 \
            -keystore sony.keystore \
            -storepass android \
            CleanHDMI_variant1.apk \
            sony
          echo "‚úÖ Variant 1 created"
        fi
        
        # Variant 2: Minimal modification
        cp base.apk CleanHDMI_minimal.apk
        # This is just the original app, renamed
        echo "‚úÖ Minimal variant created (original app)"
    
    - name: Create installation package
      run: |
        echo "üì¶ Creating installation package..."
        cd work
        
        # Check what we actually created
        echo "=== Created APK files ===" 
        ls -lh *.apk
        
        # Create readme
        cat > README.txt << 'EOF'
        Clean HDMI for Sony DSC-HX400
        ==============================
        
        APK Files (try in this order):
        -------------------------------
        1. CleanHDMI_minimal.apk - Original working app (test first!)
           This is PMCADemo renamed. If this doesn't install, no modified version will work.
           
        2. CleanHDMI_variant1.apk - Lightly modified version
           Same structure as original but with changed text
           
        3. CleanHDMI.apk - Fully modified version
           Changed app name and added custom code
        
        Installation:
        -------------
        1. Connect camera via USB (Mass Storage mode, not MTP!)
        2. On camera: Menu ‚Üí USB Connection ‚Üí Mass Storage
        3. Install: pmca-console.exe install -f CleanHDMI_minimal.apk
        
        If CleanHDMI_minimal.apk installs successfully:
        - Try CleanHDMI_variant1.apk next
        - Then try CleanHDMI.apk
        
        If CleanHDMI_minimal.apk fails:
        - Your camera may need OpenMemories-Tweak first
        - Or your camera firmware may not support these apps
        
        Error codes:
        ------------
        Error 504 = Invalid APK structure
        Error 403 = Camera locked, need OpenMemories-Tweak
        
        Build Date: $(date)
        EOF
        
        # Final check
        echo ""
        echo "‚úÖ FINAL BUILD COMPLETE"
        echo "APK files created:"
        for apk in *.apk; do
          if [ -f "$apk" ]; then
            size=$(ls -lh "$apk" | awk '{print $5}')
            echo "  - $apk ($size)"
          fi
        done
    
    - name: Upload APKs
      uses: actions/upload-artifact@v4
      with:
        name: Sony-CleanHDMI-Final-${{ github.run_number }}
        path: |
          work/*.apk
          work/*.txt
        retention-days: 90
        if-no-files-found: error
