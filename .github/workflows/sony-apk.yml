name: Build Sony APK Simple

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/sony-apk-simple.yml'

jobs:
  build-sony-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Download working Sony app
      run: |
        echo "üì• Downloading working Sony app..."
        mkdir -p work
        cd work
        
        # Download PMCADemo with correct URL
        echo "Downloading PMCADemo v0.7..."
        wget https://github.com/ma1co/PMCADemo/releases/download/v0.7/PMCADemo-release-0.7.apk -O base.apk || {
          echo "Failed to download PMCADemo, trying OpenMemories-Tweak..."
          wget https://github.com/ma1co/OpenMemories-Tweak/releases/download/v0.11/OpenMemories-Tweak-release-0.11.apk -O base.apk || {
            echo "Failed to download OpenMemories-Tweak, trying STG..."
            wget https://github.com/ma1co/STG/releases/download/v0.2/STG-release-0.2.apk -O base.apk
          }
        }
        
        if [ ! -f "base.apk" ]; then
          echo "‚ùå Could not download base APK"
          exit 1
        fi
        
        echo "‚úÖ Downloaded base.apk"
        ls -lh base.apk
        
        # Also download OpenMemories-Tweak as reference
        echo "Downloading additional reference APKs..."
        wget https://github.com/ma1co/OpenMemories-Tweak/releases/download/v0.11/OpenMemories-Tweak-release-0.11.apk -O tweak.apk || true
    
    - name: Download and setup apktool
      run: |
        echo "üì¶ Setting up apktool..."
        cd work
        
        # Download apktool
        wget https://github.com/iBotPeaches/Apktool/releases/download/v2.9.0/apktool_2.9.0.jar -O apktool.jar
        
        # Create framework directory
        mkdir -p ~/.local/share/apktool/framework
        
        echo "‚úÖ Apktool ready"
    
    - name: Decompile APK
      run: |
        echo "üîß Decompiling base APK..."
        cd work
        
        java -jar apktool.jar d -f base.apk -o decompiled || {
          echo "Standard decompile failed, trying with --no-res..."
          java -jar apktool.jar d -f --no-res base.apk -o decompiled
        }
        
        echo "üìÅ Decompiled structure:"
        ls -la decompiled/
        
        # Show what we're working with
        if [ -f "decompiled/AndroidManifest.xml" ]; then
          echo "üìÑ Original AndroidManifest.xml (first 30 lines):"
          head -30 decompiled/AndroidManifest.xml || true
        fi
        
        if [ -f "decompiled/res/values/strings.xml" ]; then
          echo "üìÑ Original strings.xml:"
          cat decompiled/res/values/strings.xml || true
        fi
    
    - name: Modify APK - Method 1 (Full modification)
      run: |
        echo "‚úèÔ∏è Method 1: Full modification..."
        cd work
        
        if [ -d "decompiled" ]; then
          cp -r decompiled decompiled_full
          cd decompiled_full
          
          # Change app name in all language files
          for file in res/values*/strings.xml; do
            if [ -f "$file" ]; then
              echo "Modifying $file"
              # Replace app name
              sed -i 's/<string name="app_name">.*<\/string>/<string name="app_name">Clean HDMI<\/string>/g' "$file" 2>/dev/null || true
              # Replace other visible strings
              sed -i 's/>PMCADemo</>Clean HDMI</g' "$file" 2>/dev/null || true
              sed -i 's/>Demo</>HDMI</g' "$file" 2>/dev/null || true
            fi
          done
          
          # Modify AndroidManifest.xml - change label only, not package
          if [ -f "AndroidManifest.xml" ]; then
            sed -i 's/android:label="[^"]*"/android:label="Clean HDMI"/g' AndroidManifest.xml 2>/dev/null || true
          fi
          
          # Create our simple activity in smali
          mkdir -p smali/com/cleanhdmi
          cat > smali/com/cleanhdmi/CleanActivity.smali << 'EOF'
        .class public Lcom/cleanhdmi/CleanActivity;
        .super Landroid/app/Activity;
        
        .method public constructor <init>()V
            .locals 0
            invoke-direct {p0}, Landroid/app/Activity;-><init>()V
            return-void
        .end method
        
        .method protected onCreate(Landroid/os/Bundle;)V
            .locals 3
            
            invoke-super {p0, p1}, Landroid/app/Activity;->onCreate(Landroid/os/Bundle;)V
            
            new-instance v0, Landroid/widget/TextView;
            invoke-direct {v0, p0}, Landroid/widget/TextView;-><init>(Landroid/content/Context;)V
            
            const-string v1, "Clean HDMI Active"
            invoke-virtual {v0, v1}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V
            
            const/high16 v1, 0x41c00000    # 24.0f
            invoke-virtual {v0, v1}, Landroid/widget/TextView;->setTextSize(F)V
            
            const/16 v1, 0x11
            invoke-virtual {v0, v1}, Landroid/widget/TextView;->setGravity(I)V
            
            const/4 v1, -0x1
            invoke-virtual {v0, v1}, Landroid/widget/TextView;->setTextColor(I)V
            
            const/high16 v1, -0x1000000
            invoke-virtual {v0, v1}, Landroid/widget/TextView;->setBackgroundColor(I)V
            
            invoke-virtual {p0, v0}, Lcom/cleanhdmi/CleanActivity;->setContentView(Landroid/view/View;)V
            
            invoke-virtual {p0}, Lcom/cleanhdmi/CleanActivity;->getWindow()Landroid/view/Window;
            move-result-object v1
            
            const/16 v2, 0x400
            invoke-virtual {v1, v2, v2}, Landroid/view/Window;->setFlags(II)V
            
            return-void
        .end method
        EOF
          
          cd ../..
        fi
    
    - name: Rebuild APK - Method 1
      run: |
        echo "üî® Rebuilding APK (Method 1)..."
        cd work
        
        if [ -d "decompiled_full" ]; then
          java -jar apktool.jar b decompiled_full -o CleanHDMI_full.apk || {
            echo "Build failed, trying without resources..."
            java -jar apktool.jar b --no-res decompiled_full -o CleanHDMI_full.apk || true
          }
          
          if [ -f "CleanHDMI_full.apk" ]; then
            echo "‚úÖ Method 1 APK created"
            ls -lh CleanHDMI_full.apk
          fi
        fi
    
    - name: Method 2 - Minimal modification
      run: |
        echo "‚úèÔ∏è Method 2: Minimal modification (safer)..."
        cd work
        
        if [ -d "decompiled" ]; then
          cp -r decompiled decompiled_minimal
          cd decompiled_minimal
          
          # Only change the app name, nothing else
          if [ -f "res/values/strings.xml" ]; then
            sed -i 's/<string name="app_name">.*<\/string>/<string name="app_name">Clean HDMI<\/string>/g' res/values/strings.xml 2>/dev/null || true
          fi
          
          cd ..
          
          # Rebuild
          java -jar apktool.jar b decompiled_minimal -o CleanHDMI_minimal.apk || true
          
          if [ -f "CleanHDMI_minimal.apk" ]; then
            echo "‚úÖ Method 2 APK created"
            ls -lh CleanHDMI_minimal.apk
          fi
        fi
    
    - name: Method 3 - Original APK (as control)
      run: |
        echo "üì¶ Method 3: Original APK as control..."
        cd work
        
        # Copy original as-is for testing
        cp base.apk CleanHDMI_original.apk
        
        if [ -f "tweak.apk" ]; then
          cp tweak.apk OpenMemories-Tweak.apk
          echo "‚úÖ Also including OpenMemories-Tweak for unlocking"
        fi
        
        echo "‚úÖ Control APKs ready"
    
    - name: Sign all APKs
      run: |
        echo "üîê Signing all APKs..."
        cd work
        
        # Create keystore
        keytool -genkeypair \
          -keyalg RSA \
          -keysize 2048 \
          -validity 10000 \
          -alias androidkey \
          -keystore sony.keystore \
          -storepass android \
          -keypass android \
          -dname "CN=Android,O=Android,C=US" \
          -noprompt
        
        # Sign each APK
        for apk in CleanHDMI*.apk; do
          if [ -f "$apk" ]; then
            echo "Signing $apk..."
            
            # Remove old signature
            zip -d "$apk" "META-INF/*" 2>/dev/null || true
            
            # Create signed version
            jarsigner \
              -sigalg SHA1withRSA \
              -digestalg SHA1 \
              -keystore sony.keystore \
              -storepass android \
              "$apk" \
              androidkey || {
              echo "Failed to sign $apk"
            }
            
            # Quick verify
            jarsigner -verify "$apk" 2>/dev/null && echo "  ‚úÖ Signature valid" || echo "  ‚ö†Ô∏è Signature invalid"
          fi
        done
    
    - name: Create final package
      run: |
        echo "üì¶ Creating final package..."
        cd work
        
        # List all APKs
        echo "=== APK Files Created ===" 
        echo ""
        for apk in *.apk; do
          if [ -f "$apk" ]; then
            size=$(ls -lh "$apk" | awk '{print $5}')
            echo "$apk - $size"
            
            # Quick check contents
            echo -n "  Contents: "
            unzip -l "$apk" 2>/dev/null | grep -c "classes.dex" | xargs echo -n "classes.dex: "
            unzip -l "$apk" 2>/dev/null | grep -c "AndroidManifest.xml" | xargs echo "AndroidManifest.xml: "
          fi
        done
        
        # Create installation guide
        cat > INSTALLATION_GUIDE.txt << 'EOF'
        Clean HDMI for Sony DSC-HX400 - Installation Guide
        ==================================================
        
        IMPORTANT: Test files in this order!
        
        1. First test - Original App (to verify camera works):
           -----------------------------------------------------
           CleanHDMI_original.apk - This is the unmodified PMCADemo
           
           Command: pmca-console.exe install -f CleanHDMI_original.apk
           
           If this DOESN'T install:
           - Your camera may need to be unlocked first
           - Install OpenMemories-Tweak.apk first
           - Or your camera firmware doesn't support apps
           
        2. If original works, try minimal modification:
           ----------------------------------------------
           CleanHDMI_minimal.apk - Only app name changed
           
           Command: pmca-console.exe install -f CleanHDMI_minimal.apk
           
        3. Finally, try full modification:
           ---------------------------------
           CleanHDMI_full.apk - Full Clean HDMI version
           
           Command: pmca-console.exe install -f CleanHDMI_full.apk
        
        Installation Steps:
        ------------------
        1. Connect camera with USB cable
        2. On camera: Menu ‚Üí USB Connection ‚Üí Mass Storage
        3. Wait for Windows to recognize camera
        4. Run pmca-console.exe with the APK file
        
        Troubleshooting:
        ---------------
        - Error 504: APK structure invalid - try next version
        - Error 403: Camera locked - install OpenMemories-Tweak first
        - Connection refused: Camera not in Mass Storage mode
        
        If OpenMemories-Tweak.apk is included:
        - Install it first to unlock your camera
        - Then try the Clean HDMI apps
        
        Build Date: $(date)
        EOF
        
        echo ""
        echo "========================================="
        echo "‚úÖ BUILD COMPLETE!"
        echo "========================================="
        echo ""
        echo "Files ready for download:"
        ls -1 *.apk
    
    - name: Upload APKs
      uses: actions/upload-artifact@v4
      with:
        name: Sony-CleanHDMI-Package-${{ github.run_number }}
        path: |
          work/*.apk
          work/*.txt
        retention-days: 90
        if-no-files-found: error
        
